class Solution(object):
    def minCostConnectPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        def find(parent, i):
            if parent[i] == i:
                return i
            return find(parent, parent[i])

        def union(parent, rank, x, y):
            x_root = find(parent, x)
            y_root = find(parent, y)

            if rank[x_root] < rank[y_root]:
                parent[x_root] = y_root
            elif rank[x_root] > rank[y_root]:
                parent[y_root] = x_root
            else:
                parent[y_root] = x_root
                rank[x_root] += 1

        n = len(points)
        edges = []  # List to store edges and their corresponding Manhattan distances

        for i in range(n):
            for j in range(i + 1, n):
                manhattan_dist = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])
                edges.append((manhattan_dist, i, j))

        edges.sort()  # Sort edges by Manhattan distance

        parent = list(range(n))
        rank = [0] * n
        min_cost = 0

        for edge in edges:
            manhattan_dist, u, v = edge
            if find(parent, u) != find(parent, v):
                union(parent, rank, u, v)
                min_cost += manhattan_dist

        return min_cost  # Return the computed minimum cost as an integer
